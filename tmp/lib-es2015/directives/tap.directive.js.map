{"version":3,"sources":["../../directives/tap.directive.ts"],"names":[],"mappings":"AAAA,qGAAC;AAED,OADO,EAAE,SAAA,EAAW,UAAA,EAAY,YAAA,EAAsB,MAAA,EAAQ,SAAA,EAAU,MAAA,eAAA,CAAA;AAExE,OADO,EAAE,OAAA,EAAQ,MAAA,6BAAA,CAAA;AAIjB,MACC;IAED;;;;OAIG;IACH,YAHsB,OAAS,EAAiB,EAAI,EAAoB,QAAU;QAA5D,YAAA,GAAA,OAAA,CAAS;QAAiB,OAAA,GAAA,EAAA,CAAI;QAAoB,aAAA,GAAA,QAAA,CAAU;QAH/E,aAAQ,GACG,IAAI,YAAA,EAAa,CAAE;IAQ/B,CAAC;IACH;;OAEG;IACH,QAPG;QAQC,IAAI,CAPC,WAAC,EAAW,CAAE;IAQrB,CAAC;IACH;;;OAGG;IACH,WATG;QAWC,EAAE,CAAC,CAAC,IATC,CAAI,OAAC,CAAO,MAAC,CAAM,QAAC,CAAQ,CAAC,CAAA;YAUhC,EAAE,CAAC,CAAC,OATO,MAAA,KAAW,WAAA,CAAY,CAAC,CAAA;gBAWjC,MATM,KAAA,CAAM,4DAAC,CAA4D,CAAC;YAU5E,CAAC;YATC,IAAA,CAAK,CAAA;gBAUL,8BAA8B;gBAC9B,EAAE,CAAC,CAAC,OATO,MAAA,KAAW,WAAA,CAAY,CAAC,CAAA;oBAUjC,MAAM,gBAAgB,CAThB,EAAA,GAAK,IAAI,MAAA,CAAO,IAAC,CAAI,EAAC,CAAE,aAAC,CAAa,CAAC;oBAU7C,EAAE,CATC,EAAC,CAAE,KAAC,EAAM;wBAUX,IAAI,CATC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,CAAC;oBAU3B,CAAC,CATC,CAAC;gBAUL,CAAC;YACH,CAAC;QACH,CAAC;QATC,IAAA,CAAK,CAAA;YAUL,6BAA6B;YAC7B,IAAI,CATC,QAAC,CAAQ,WAAC,CAAW,IAAC,CAAI,EAAC,CAAE,aAAC,EAAc,SAAA,EAAW;gBAU1D,IAAI,CATC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,CAAC;YAU3B,CAAC,CATC,CAAC;QAUL,CAAC;IAEH,CAAC;;AARI,uBAAA,GAAoC;IAU3C,EATE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAUvB,QAAQ,EATE,YAAA;aAUX,EATC,EAAG;CAUJ,CATC;AAUF;;GAEG;AAVF,2BAAA,GAAA,MAAA;IAYD,EAAC,IAAI,EAAE,OAAO,GAAG;IACjB,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,SAAS,GAAG;CAClB,CAAC;AAVK,2BAAA,GAAyD;IAYhE,UAAU,EAXE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAY7B,CAXC;AAcF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;IAChC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC;IAC/B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC;IAC1B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;AAChC,CAAC","file":"tap.directive.js","sourceRoot":"","sourcesContent":["/** This directive enable tap if HammerJS is loaded, otherwise it falls back to normal click event */\n\nimport { Directive, ElementRef, EventEmitter, OnInit, Output, Renderer2 } from '@angular/core';\nimport { Gallery } from '../services/gallery.service';\n\ndeclare const Hammer: any;\nexport class TapDirective implements OnInit {\n\n   tapClick = new EventEmitter();\n/**\n * @param {?} gallery\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(private gallery: Gallery,\nprivate el: ElementRef,\nprivate renderer: Renderer2) {\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.setTapEvent();\n  }\n/**\n * Enable gestures if hammer is loaded\n * @return {?}\n */\nsetTapEvent() {\n\n    if (this.gallery.config.gestures) {\n      if (typeof Hammer === 'undefined') {\n\n        throw Error('[NgGallery]: HammerJS is undefined, make sure it is loaded');\n      } else {\n        /** Use tap for click event */\n        if (typeof Hammer !== 'undefined') {\n          const /** @type {?} */ mc = new Hammer(this.el.nativeElement);\n          mc.on('tap', () => {\n            this.tapClick.emit(null);\n          });\n        }\n      }\n    } else {\n      /** Use normal click event */\n      this.renderer.setProperty(this.el.nativeElement, 'onclick', () => {\n        this.tapClick.emit(null);\n      });\n    }\n\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[tapClick]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Gallery, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tapClick': [{ type: Output },],\n};\n}\n\nfunction TapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTapDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTapDirective.ctorParameters;\n/** @type {?} */\nTapDirective.propDecorators;\n/** @type {?} */\nTapDirective.prototype.tapClick;\n/** @type {?} */\nTapDirective.prototype.gallery;\n/** @type {?} */\nTapDirective.prototype.el;\n/** @type {?} */\nTapDirective.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
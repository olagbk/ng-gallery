{"version":3,"sources":["../../services/gallery.service.ts"],"names":[],"mappings":"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","file":"gallery.service.js","sourceRoot":"","sourcesContent":["import { ComponentRef, Inject, Injectable } from '@angular/core';\nimport { ENTER, ESCAPE, RIGHT_ARROW, LEFT_ARROW } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { BlockScrollStrategy, GlobalPositionStrategy, Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\n\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\n\nimport'rxjs/add/observable/interval';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/takeWhile';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/filter';\n\nimport { CONFIG } from './gallery.token';\nimport { GalleryLightboxComponent } from '../components/gallery-lightbox/gallery-lightbox.component';\nimport { GalleryState, GalleryConfig, GalleryItem } from '../models/index';\nimport { defaultConfig } from './gallery.default';\nimport { mergeDeep } from '../utils/merge-deep';\nexport class Gallery {\n/**\n * Gallery portal for dialog usage\n */\ngalleryPortal = new ComponentPortal(GalleryLightboxComponent);\n/**\n * Initial state\n */\nprivate initialState: GalleryState = {\n    currIndex: 0,\n    hasNext: false,\n    hasPrev: false,\n    play: false\n  };\n/**\n * Gallery state\n */\nstate: GalleryState = this.initialState;\n  state$ = new BehaviorSubject<GalleryState>(this.initialState);\n/**\n * Gallery config\n */\nconfig: GalleryConfig = defaultConfig;\n  config$ = new BehaviorSubject<GalleryConfig>(this.config);\n/**\n * Gallery overlay config\n */\noverlayConfig: OverlayConfig;\n/**\n * Gallery overlay ref\n */\noverlayRef: OverlayRef;\n/**\n * @param {?} config\n * @param {?} overlay\n * @param {?} viewportRuler\n */\nconstructor( config: GalleryConfig,\nprivate overlay: Overlay,\nprivate viewportRuler: ViewportRuler) {\n\n    /** Start config worker */\n    this.configWorker().subscribe();\n\n    /** Start player worker */\n    this.playerWorker().subscribe();\n\n    this.setConfig(config);\n  }\n/**\n * Load items and reset the state\n * @param {?} items\n * @return {?}\n */\nload(items: GalleryItem[]) {\n\n    this.setState({\n      items: items,\n      hasNext: items.length > 1\n    });\n  }\n/**\n * Set active item\n * \n * @param {?} i\n * @return {?}\n */\nset(i: number) {\n\n    this.setState({\n      currIndex: i,\n      hasNext: i < this.state.items.length - 1,\n      hasPrev: i > 0\n    });\n  }\n/**\n * Next item\n * @return {?}\n */\nnext() {\n\n    if (this.state.hasNext) {\n      const /** @type {?} */ index = this.state.currIndex + 1;\n      this.set(index);\n    } else {\n      this.set(0);\n    }\n  }\n/**\n * Prev item\n * @return {?}\n */\nprev() {\n\n    if (this.state.hasPrev) {\n      const /** @type {?} */ index = this.state.currIndex - 1;\n      this.set(index);\n    } else {\n      this.set(this.state.items.length - 1);\n    }\n  }\n/**\n * Reset gallery to initial state\n * @return {?}\n */\nreset() {\n    this.setState(this.initialState);\n  }\n/**\n * Set gallery state\n * \n * @param {?} state\n * @return {?}\n */\nsetState(state: GalleryState) {\n    this.state = {...this.state, ...state};\n    this.state$.next(this.state);\n  }\n/**\n * Set gallery config\n * \n * @param {?} config\n * @return {?}\n */\nsetConfig(config: GalleryConfig) {\n    // if (config.overlay) {\n    //   /** Set overlay config */\n    //   if (config.overlay.positionStrategy === 'GlobalPositionStrategy') {\n    //     this.config.overlay.positionStrategy = new GlobalPositionStrategy().centerHorizontally();\n    //   } else {\n    //     // ConnectedPositionStrategy\n    //     this.config.overlay.positionStrategy = new GlobalPositionStrategy().centerHorizontally();\n    //   }\n    //\n    //   if (config.overlay.scrollStrategy === 'BlockScrollStrategy') {\n    //     this.config.overlay.scrollStrategy = new BlockScrollStrategy(this.viewportRuler);\n    //   } else if (config.overlay.scrollStrategy === 'NoopScrollStrategy') {\n    //     this.config.overlay.scrollStrategy = new NoopScrollStrategy();\n    //   } else {\n    //     /** TODO: Check if CloseScrollStrategy useful for gallery */\n    //     // CloseScrollStrategy\n    //     // this.config.overlay.scrollStrategy = new CloseScrollStrategy();\n    //   }\n    // }\n\n    this.config = mergeDeep(this.config, config);\n\n    /** set overlay config */\n    this.overlayConfig = {\n      backdropClass: this.config.lightbox.backdropClass,\n      panelClass: this.config.lightbox.panelClass,\n      hasBackdrop: this.config.lightbox.hasBackdrop,\n      positionStrategy: new GlobalPositionStrategy().centerHorizontally(),\n      scrollStrategy: new BlockScrollStrategy(this.viewportRuler)\n    };\n  }\n/**\n * Start slide show\n * \n * @return {?}\n */\nplay() {\n    this.setState({\n      play: true\n    });\n  }\n/**\n * End slide show\n * @return {?}\n */\nstop() {\n    this.setState({\n      play: false\n    });\n  }\n/**\n * Open gallery in an overlay\n * \n * @param {?=} i\n * @return {?}\n */\nopen(i = 0) {\n    this.set(i);\n    this.overlayRef = this.overlay.create(this.overlayConfig);\n    const /** @type {?} */ compRef: ComponentRef<GalleryLightboxComponent> = this.overlayRef.attach(this.galleryPortal);\n\n    /** Close overlay on backdropClick */\n    this.overlayRef.backdropClick().subscribe(() => this.close());\n\n    /** Activate keyboard listener */\n    compRef.instance.keyDown.subscribe((ev) => this.handleKeydown(ev));\n  }\n/**\n * Close gallery overlay\n * @return {?}\n */\nclose() {\n    /** Stop player if started */\n    this.stop();\n    /** If overlay is already opened */\n    if (this.overlayRef.hasAttached()) {\n      this.overlayRef.dispose();\n    }\n  }\n/**\n * Handles global key presses while gallery overlay is opened\n * \n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.prev();\n        break;\n      case RIGHT_ARROW:\n      case ENTER:\n        this.next();\n        break;\n      case ESCAPE:\n        this.close();\n        break;\n      default:\n        return;\n    }\n  }\n/**\n * Start player according to the state\n * @return {?}\n */\nplayerWorker() {\n    return this.state$.filter(state => state.play)\n      .switchMap(() => Observable.interval(this.config.player.interval)\n        .takeWhile(() => this.state.play)\n        .do(() => this.next()));\n  }\n/**\n * Set config async\n * @return {?}\n */\nconfigWorker() {\n    return this.config$.do((config: GalleryConfig) => this.setConfig(config));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [CONFIG, ] }, ]},\n{type: Overlay, },\n{type: ViewportRuler, },\n];\n}\n\nfunction Gallery_tsickle_Closure_declarations() {\n/** @type {?} */\nGallery.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGallery.ctorParameters;\n/**\n * Gallery portal for dialog usage\n * @type {?}\n */\nGallery.prototype.galleryPortal;\n/**\n * Initial state\n * @type {?}\n */\nGallery.prototype.initialState;\n/**\n * Gallery state\n * @type {?}\n */\nGallery.prototype.state;\n/** @type {?} */\nGallery.prototype.state$;\n/**\n * Gallery config\n * @type {?}\n */\nGallery.prototype.config;\n/** @type {?} */\nGallery.prototype.config$;\n/**\n * Gallery overlay config\n * @type {?}\n */\nGallery.prototype.overlayConfig;\n/**\n * Gallery overlay ref\n * @type {?}\n */\nGallery.prototype.overlayRef;\n/** @type {?} */\nGallery.prototype.overlay;\n/** @type {?} */\nGallery.prototype.viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
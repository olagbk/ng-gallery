{"version":3,"sources":["../../directives/lazy.directive.ts"],"names":[],"mappings":"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","file":"lazy.directive.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2,\n  OnDestroy\n} from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport'rxjs/add/operator/do';\nimport'rxjs/add/observable/of';\nexport class LazyDirective implements OnDestroy {\n/**\n * Lazy load worker\n */\nlazyWorker$ = new Subject();\n/**\n * @param {?} imagePath\n * @return {?}\n */\nset lazyImage(imagePath) {\n    this.getImage(imagePath);\n  }\n\n   loading = new EventEmitter<boolean>();\n/**\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(private el: ElementRef,\nprivate renderer: Renderer2) {\n\n    this.lazyWorker$.switchMap((imageSrc) =>\n\n      Observable.of(imageSrc)\n        .do((src: string) => {\n\n          /** Image is loading */\n          this.loading.emit(true);\n\n          const img = this.renderer.createElement('img');\n          img.src = src;\n\n          /** Image is loaded */\n          img.onload = () => {\n            this.renderer.setProperty(this.el.nativeElement, 'src', src);\n            this.loading.emit(false);\n          };\n\n          /** Image load error */\n          img.onerror = err => {\n            this.loading.emit(false);\n          };\n        })\n    ).subscribe();\n  }\n/**\n * @param {?} imagePath\n * @return {?}\n */\ngetImage(imagePath) {\n    this.lazyWorker$.next(imagePath);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.lazyWorker$.unsubscribe();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[lazyImage]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'lazyImage': [{ type: Input, args: ['lazyImage', ] },],\n'loading': [{ type: Output },],\n};\n}\n\nfunction LazyDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLazyDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLazyDirective.ctorParameters;\n/** @type {?} */\nLazyDirective.propDecorators;\n/**\n * Lazy load worker\n * @type {?}\n */\nLazyDirective.prototype.lazyWorker$;\n/** @type {?} */\nLazyDirective.prototype.loading;\n/** @type {?} */\nLazyDirective.prototype.el;\n/** @type {?} */\nLazyDirective.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}